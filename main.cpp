#include <gecode/int.hh>
#include <gecode/search.hh>

using namespace Gecode;

class MatchTeam : public Space {
protected:
  IntVarArray l;
public:
  MatchTeam(void) : l(*this, 10, 0, 209) {

    // each slot can only get 1 combination
    distinct(*this, l);

    // Each team should appear 4 times
    IntSet team0({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83});
    IntSet team1({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139});
    IntSet team2({0, 1, 2, 3, 4, 5, 6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174});
    IntSet team3({0, 7, 8, 9, 10, 11, 12, 28, 29, 30, 31, 32, 33, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194});
    IntSet team4({1, 7, 13, 14, 15, 16, 17, 28, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 84, 90, 91, 92, 93, 94, 105, 106, 107, 108, 109, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 140, 141, 142, 143, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204});
    IntSet team5({2, 8, 13, 18, 19, 20, 21, 29, 34, 39, 40, 41, 42, 49, 54, 55, 56, 57, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79, 85, 90, 95, 96, 97, 98, 105, 110, 111, 112, 113, 120, 121, 122, 123, 130, 131, 132, 133, 134, 135, 140, 145, 146, 147, 148, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 185, 186, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208});
    IntSet team6({3, 9, 14, 18, 22, 23, 24, 30, 35, 39, 43, 44, 45, 50, 54, 58, 59, 60, 64, 68, 69, 70, 74, 75, 76, 80, 81, 82, 86, 91, 95, 99, 100, 101, 106, 110, 114, 115, 116, 120, 124, 125, 126, 130, 131, 132, 136, 137, 138, 141, 145, 149, 150, 151, 155, 159, 160, 161, 165, 166, 167, 171, 172, 173, 175, 179, 180, 181, 185, 186, 187, 191, 192, 193, 195, 196, 197, 201, 202, 203, 205, 206, 207, 209});
    IntSet team7({4, 10, 15, 19, 22, 25, 26, 31, 36, 40, 43, 46, 47, 51, 55, 58, 61, 62, 65, 68, 71, 72, 74, 77, 78, 80, 81, 83, 87, 92, 96, 99, 102, 103, 107, 111, 114, 117, 118, 121, 124, 127, 128, 130, 133, 134, 136, 137, 139, 142, 146, 149, 152, 153, 156, 159, 162, 163, 165, 168, 169, 171, 172, 174, 176, 179, 182, 183, 185, 188, 189, 191, 192, 194, 195, 198, 199, 201, 202, 204, 205, 206, 208, 209});
    IntSet team8({5, 11, 16, 20, 23, 25, 27, 32, 37, 41, 44, 46, 48, 52, 56, 59, 61, 63, 66, 69, 71, 73, 75, 77, 79, 80, 82, 83, 88, 93, 97, 100, 102, 104, 108, 112, 115, 117, 119, 122, 125, 127, 129, 131, 133, 135, 136, 138, 139, 143, 147, 150, 152, 154, 157, 160, 162, 164, 166, 168, 170, 171, 173, 174, 177, 180, 182, 184, 186, 188, 190, 191, 193, 194, 196, 198, 200, 201, 203, 204, 205, 207, 208, 209});
    IntSet team9({6, 12, 17, 21, 24, 26, 27, 33, 38, 42, 45, 47, 48, 53, 57, 60, 62, 63, 67, 70, 72, 73, 76, 78, 79, 81, 82, 83, 89, 94, 98, 101, 103, 104, 109, 113, 116, 118, 119, 123, 126, 128, 129, 132, 134, 135, 137, 138, 139, 144, 148, 151, 153, 154, 158, 161, 163, 164, 167, 169, 170, 172, 173, 174, 178, 181, 183, 184, 187, 189, 190, 192, 193, 194, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209});

    count(*this, l, team0, IRT_EQ, 4);
    count(*this, l, team1, IRT_EQ, 4);
    count(*this, l, team2, IRT_EQ, 4);
    count(*this, l, team3, IRT_EQ, 4);
    count(*this, l, team4, IRT_EQ, 4);
    count(*this, l, team5, IRT_EQ, 4);
    count(*this, l, team6, IRT_EQ, 4);
    count(*this, l, team7, IRT_EQ, 4);
    count(*this, l, team8, IRT_EQ, 4);
    count(*this, l, team9, IRT_EQ, 4);

    // Each pair should appear at least once
    IntSet pair0({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27});
    IntSet pair1({0, 1, 2, 3, 4, 5, 6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48});
    IntSet pair2({0, 7, 8, 9, 10, 11, 12, 28, 29, 30, 31, 32, 33, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63});
    IntSet pair3({1, 7, 13, 14, 15, 16, 17, 28, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73});
    IntSet pair4({2, 8, 13, 18, 19, 20, 21, 29, 34, 39, 40, 41, 42, 49, 54, 55, 56, 57, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79});
    IntSet pair5({3, 9, 14, 18, 22, 23, 24, 30, 35, 39, 43, 44, 45, 50, 54, 58, 59, 60, 64, 68, 69, 70, 74, 75, 76, 80, 81, 82});
    IntSet pair6({4, 10, 15, 19, 22, 25, 26, 31, 36, 40, 43, 46, 47, 51, 55, 58, 61, 62, 65, 68, 71, 72, 74, 77, 78, 80, 81, 83});
    IntSet pair7({5, 11, 16, 20, 23, 25, 27, 32, 37, 41, 44, 46, 48, 52, 56, 59, 61, 63, 66, 69, 71, 73, 75, 77, 79, 80, 82, 83});
    IntSet pair8({6, 12, 17, 21, 24, 26, 27, 33, 38, 42, 45, 47, 48, 53, 57, 60, 62, 63, 67, 70, 72, 73, 76, 78, 79, 81, 82, 83});
    IntSet pair9({0, 1, 2, 3, 4, 5, 6, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104});
    IntSet pair10({0, 7, 8, 9, 10, 11, 12, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119});
    IntSet pair11({1, 7, 13, 14, 15, 16, 17, 84, 90, 91, 92, 93, 94, 105, 106, 107, 108, 109, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129});
    IntSet pair12({2, 8, 13, 18, 19, 20, 21, 85, 90, 95, 96, 97, 98, 105, 110, 111, 112, 113, 120, 121, 122, 123, 130, 131, 132, 133, 134, 135});
    IntSet pair13({3, 9, 14, 18, 22, 23, 24, 86, 91, 95, 99, 100, 101, 106, 110, 114, 115, 116, 120, 124, 125, 126, 130, 131, 132, 136, 137, 138});
    IntSet pair14({4, 10, 15, 19, 22, 25, 26, 87, 92, 96, 99, 102, 103, 107, 111, 114, 117, 118, 121, 124, 127, 128, 130, 133, 134, 136, 137, 139});
    IntSet pair15({5, 11, 16, 20, 23, 25, 27, 88, 93, 97, 100, 102, 104, 108, 112, 115, 117, 119, 122, 125, 127, 129, 131, 133, 135, 136, 138, 139});
    IntSet pair16({6, 12, 17, 21, 24, 26, 27, 89, 94, 98, 101, 103, 104, 109, 113, 116, 118, 119, 123, 126, 128, 129, 132, 134, 135, 137, 138, 139});
    IntSet pair17({0, 28, 29, 30, 31, 32, 33, 84, 85, 86, 87, 88, 89, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154});
    IntSet pair18({1, 28, 34, 35, 36, 37, 38, 84, 90, 91, 92, 93, 94, 140, 141, 142, 143, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164});
    IntSet pair19({2, 29, 34, 39, 40, 41, 42, 85, 90, 95, 96, 97, 98, 140, 145, 146, 147, 148, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170});
    IntSet pair20({3, 30, 35, 39, 43, 44, 45, 86, 91, 95, 99, 100, 101, 141, 145, 149, 150, 151, 155, 159, 160, 161, 165, 166, 167, 171, 172, 173});
    IntSet pair21({4, 31, 36, 40, 43, 46, 47, 87, 92, 96, 99, 102, 103, 142, 146, 149, 152, 153, 156, 159, 162, 163, 165, 168, 169, 171, 172, 174});
    IntSet pair22({5, 32, 37, 41, 44, 46, 48, 88, 93, 97, 100, 102, 104, 143, 147, 150, 152, 154, 157, 160, 162, 164, 166, 168, 170, 171, 173, 174});
    IntSet pair23({6, 33, 38, 42, 45, 47, 48, 89, 94, 98, 101, 103, 104, 144, 148, 151, 153, 154, 158, 161, 163, 164, 167, 169, 170, 172, 173, 174});
    IntSet pair24({7, 28, 49, 50, 51, 52, 53, 84, 105, 106, 107, 108, 109, 140, 141, 142, 143, 144, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184});
    IntSet pair25({8, 29, 49, 54, 55, 56, 57, 85, 105, 110, 111, 112, 113, 140, 145, 146, 147, 148, 175, 176, 177, 178, 185, 186, 187, 188, 189, 190});
    IntSet pair26({9, 30, 50, 54, 58, 59, 60, 86, 106, 110, 114, 115, 116, 141, 145, 149, 150, 151, 175, 179, 180, 181, 185, 186, 187, 191, 192, 193});
    IntSet pair27({10, 31, 51, 55, 58, 61, 62, 87, 107, 111, 114, 117, 118, 142, 146, 149, 152, 153, 176, 179, 182, 183, 185, 188, 189, 191, 192, 194});
    IntSet pair28({11, 32, 52, 56, 59, 61, 63, 88, 108, 112, 115, 117, 119, 143, 147, 150, 152, 154, 177, 180, 182, 184, 186, 188, 190, 191, 193, 194});
    IntSet pair29({12, 33, 53, 57, 60, 62, 63, 89, 109, 113, 116, 118, 119, 144, 148, 151, 153, 154, 178, 181, 183, 184, 187, 189, 190, 192, 193, 194});
    IntSet pair30({13, 34, 49, 64, 65, 66, 67, 90, 105, 120, 121, 122, 123, 140, 155, 156, 157, 158, 175, 176, 177, 178, 195, 196, 197, 198, 199, 200});
    IntSet pair31({14, 35, 50, 64, 68, 69, 70, 91, 106, 120, 124, 125, 126, 141, 155, 159, 160, 161, 175, 179, 180, 181, 195, 196, 197, 201, 202, 203});
    IntSet pair32({15, 36, 51, 65, 68, 71, 72, 92, 107, 121, 124, 127, 128, 142, 156, 159, 162, 163, 176, 179, 182, 183, 195, 198, 199, 201, 202, 204});
    IntSet pair33({16, 37, 52, 66, 69, 71, 73, 93, 108, 122, 125, 127, 129, 143, 157, 160, 162, 164, 177, 180, 182, 184, 196, 198, 200, 201, 203, 204});
    IntSet pair34({17, 38, 53, 67, 70, 72, 73, 94, 109, 123, 126, 128, 129, 144, 158, 161, 163, 164, 178, 181, 183, 184, 197, 199, 200, 202, 203, 204});
    IntSet pair35({18, 39, 54, 64, 74, 75, 76, 95, 110, 120, 130, 131, 132, 145, 155, 165, 166, 167, 175, 185, 186, 187, 195, 196, 197, 205, 206, 207});
    IntSet pair36({19, 40, 55, 65, 74, 77, 78, 96, 111, 121, 130, 133, 134, 146, 156, 165, 168, 169, 176, 185, 188, 189, 195, 198, 199, 205, 206, 208});
    IntSet pair37({20, 41, 56, 66, 75, 77, 79, 97, 112, 122, 131, 133, 135, 147, 157, 166, 168, 170, 177, 186, 188, 190, 196, 198, 200, 205, 207, 208});
    IntSet pair38({21, 42, 57, 67, 76, 78, 79, 98, 113, 123, 132, 134, 135, 148, 158, 167, 169, 170, 178, 187, 189, 190, 197, 199, 200, 206, 207, 208});
    IntSet pair39({22, 43, 58, 68, 74, 80, 81, 99, 114, 124, 130, 136, 137, 149, 159, 165, 171, 172, 179, 185, 191, 192, 195, 201, 202, 205, 206, 209});
    IntSet pair40({23, 44, 59, 69, 75, 80, 82, 100, 115, 125, 131, 136, 138, 150, 160, 166, 171, 173, 180, 186, 191, 193, 196, 201, 203, 205, 207, 209});
    IntSet pair41({24, 45, 60, 70, 76, 81, 82, 101, 116, 126, 132, 137, 138, 151, 161, 167, 172, 173, 181, 187, 192, 193, 197, 202, 203, 206, 207, 209});
    IntSet pair42({25, 46, 61, 71, 77, 80, 83, 102, 117, 127, 133, 136, 139, 152, 162, 168, 171, 174, 182, 188, 191, 194, 198, 201, 204, 205, 208, 209});
    IntSet pair43({26, 47, 62, 72, 78, 81, 83, 103, 118, 128, 134, 137, 139, 153, 163, 169, 172, 174, 183, 189, 192, 194, 199, 202, 204, 206, 208, 209});
    IntSet pair44({27, 48, 63, 73, 79, 82, 83, 104, 119, 129, 135, 138, 139, 154, 164, 170, 173, 174, 184, 190, 193, 194, 200, 203, 204, 207, 208, 209});

    count(*this, l, pair0, IRT_GQ, 1);
    // count(*this, l, pair1, IRT_GQ, 1);
    // count(*this, l, pair2, IRT_GQ, 1);
    // count(*this, l, pair3, IRT_GQ, 1);
    // count(*this, l, pair4, IRT_GQ, 1);
    // count(*this, l, pair5, IRT_GQ, 1);
    // count(*this, l, pair6, IRT_GQ, 1);
    // count(*this, l, pair7, IRT_GQ, 1);
    // count(*this, l, pair8, IRT_GQ, 1);
    count(*this, l, pair9, IRT_GQ, 1);
    count(*this, l, pair10, IRT_GQ, 1);
    count(*this, l, pair11, IRT_GQ, 1);
    count(*this, l, pair12, IRT_GQ, 1);
    count(*this, l, pair13, IRT_GQ, 1);
    count(*this, l, pair14, IRT_GQ, 1);
    count(*this, l, pair15, IRT_GQ, 1);
    count(*this, l, pair16, IRT_GQ, 1);
    count(*this, l, pair17, IRT_GQ, 1);
    // count(*this, l, pair18, IRT_GQ, 1);
    // count(*this, l, pair19, IRT_GQ, 1);
    // count(*this, l, pair20, IRT_GQ, 1);
    // count(*this, l, pair21, IRT_GQ, 1);
    // count(*this, l, pair22, IRT_GQ, 1);
    // count(*this, l, pair23, IRT_GQ, 1);
    // count(*this, l, pair24, IRT_GQ, 1);
    // count(*this, l, pair25, IRT_GQ, 1);
    // count(*this, l, pair26, IRT_GQ, 1);
    // count(*this, l, pair27, IRT_GQ, 1);
    // count(*this, l, pair28, IRT_GQ, 1);
    // count(*this, l, pair29, IRT_GQ, 1);
    // count(*this, l, pair30, IRT_GQ, 1);
    count(*this, l, pair31, IRT_GQ, 1);
    count(*this, l, pair32, IRT_GQ, 1);
    count(*this, l, pair33, IRT_GQ, 1);
    count(*this, l, pair34, IRT_GQ, 1);
    count(*this, l, pair35, IRT_GQ, 1);
    count(*this, l, pair36, IRT_GQ, 1);
    count(*this, l, pair37, IRT_GQ, 1);
    count(*this, l, pair38, IRT_GQ, 1);
    count(*this, l, pair39, IRT_GQ, 1);
    // count(*this, l, pair40, IRT_GQ, 1);
    // count(*this, l, pair41, IRT_GQ, 1);
    // count(*this, l, pair42, IRT_GQ, 1);
    // count(*this, l, pair43, IRT_GQ, 1);
    // count(*this, l, pair44, IRT_GQ, 1);

    // post branching
    branch(*this, l, INT_VAR_SIZE_MIN(), INT_VAL_MIN());
  }
  // search support
  MatchTeam(MatchTeam& s) : Space(s) {
    l.update(*this, s.l);
  }

  virtual Space* copy(void) {
    return new MatchTeam(*this);
  }

  // print solution
  void print(void) const {
    std::cout << l << std::endl;
  }
};

// main function
int main(int argc, char* argv[]) {
  // create model and search engine
  MatchTeam* m = new MatchTeam;
  DFS<MatchTeam> e(m);
  delete m;
  // search and print all solutions
  while (MatchTeam* s = e.next()) {
    s->print(); delete s; break;
  }
  return 0;
}
